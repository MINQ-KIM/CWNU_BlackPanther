# 1 "0_Src/AppSw/Tricore/TftApp/DrawLogo.c"
# 1 "C:\\Users\\hyunii\\Documents\\InfineonRacer\\src\\InfineonRacer_TC23A//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "0_Src/AppSw/Tricore/TftApp/DrawLogo.c"
# 11 "0_Src/AppSw/Tricore/TftApp/DrawLogo.c"
# 1 "0_Src/BaseSw/iLLD/TC23A/Tricore/Cpu/Std/Ifx_Types.h" 1
# 29 "0_Src/BaseSw/iLLD/TC23A/Tricore/Cpu/Std/Ifx_Types.h"
# 1 "0_Src/BaseSw/Infra/Platform/Tricore/Compilers/Compilers.h" 1
# 29 "0_Src/BaseSw/Infra/Platform/Tricore/Compilers/Compilers.h"
# 1 "0_Src/AppSw/CpuGeneric/Config/Ifx_Cfg.h" 1
# 30 "0_Src/BaseSw/Infra/Platform/Tricore/Compilers/Compilers.h" 2
# 65 "0_Src/BaseSw/Infra/Platform/Tricore/Compilers/Compilers.h"
# 1 "0_Src/BaseSw/Infra/Platform/Tricore/Compilers/CompilerGnuc.h" 1
# 29 "0_Src/BaseSw/Infra/Platform/Tricore/Compilers/CompilerGnuc.h"
# 1 "c:\\hightec\\toolchains\\tricore\\v4.9.1.0-infineon-1.1\\lib\\gcc\\tricore\\4.9.4\\include\\stddef.h" 1 3 4
# 147 "c:\\hightec\\toolchains\\tricore\\v4.9.1.0-infineon-1.1\\lib\\gcc\\tricore\\4.9.4\\include\\stddef.h" 3 4
typedef long int ptrdiff_t;
# 212 "c:\\hightec\\toolchains\\tricore\\v4.9.1.0-infineon-1.1\\lib\\gcc\\tricore\\4.9.4\\include\\stddef.h" 3 4
typedef long unsigned int size_t;
# 324 "c:\\hightec\\toolchains\\tricore\\v4.9.1.0-infineon-1.1\\lib\\gcc\\tricore\\4.9.4\\include\\stddef.h" 3 4
typedef int wchar_t;
# 30 "0_Src/BaseSw/Infra/Platform/Tricore/Compilers/CompilerGnuc.h" 2
# 66 "0_Src/BaseSw/Infra/Platform/Tricore/Compilers/Compilers.h" 2
# 113 "0_Src/BaseSw/Infra/Platform/Tricore/Compilers/Compilers.h"
void Ifx_C_Init(void);
# 30 "0_Src/BaseSw/iLLD/TC23A/Tricore/Cpu/Std/Ifx_Types.h" 2
# 1 "0_Src/BaseSw/iLLD/TC23A/Tricore/Cpu/Std/Platform_Types.h" 1
# 88 "0_Src/BaseSw/iLLD/TC23A/Tricore/Cpu/Std/Platform_Types.h"
typedef signed char sint8;
typedef unsigned char uint8;
typedef signed short sint16;
typedef unsigned short uint16;
typedef signed long sint32;
typedef unsigned long uint32;
typedef float float32;
typedef double float64;

typedef unsigned long uint8_least;
typedef unsigned long uint16_least;
typedef unsigned long uint32_least;
typedef signed long sint8_least;
typedef signed long sint16_least;
typedef signed long sint32_least;

typedef unsigned char boolean;
# 31 "0_Src/BaseSw/iLLD/TC23A/Tricore/Cpu/Std/Ifx_Types.h" 2





typedef signed long long sint64;
typedef unsigned long long uint64;

typedef const char *pchar;
typedef void *pvoid;
typedef volatile void *vvoid;

typedef struct
{
    float32 real;
    float32 imag;
} cfloat32;

typedef struct
{
    sint32 real;
    sint32 imag;
} csint32;

typedef sint64 Ifx_TickTime;
# 68 "0_Src/BaseSw/iLLD/TC23A/Tricore/Cpu/Std/Ifx_Types.h"
typedef sint16 Ifx_SizeT;



typedef struct
{
    void *base;
    uint16 index;
    uint16 length;
} Ifx_CircularBuffer;

typedef uint16 Ifx_Priority;
typedef uint32 Ifx_TimerValue;
typedef sint32 Ifx_SignedTimerVal;

typedef pvoid Ifx_AddressValue;

typedef struct
{
    uint16 priority;
    uint16 provider;
} Ifx_IsrSetting;


typedef enum
{
    Ifx_ActiveState_low = 0,
    Ifx_ActiveState_high = 1
} Ifx_ActiveState;

typedef enum
{
    Ifx_ParityMode_even = 0,
    Ifx_ParityMode_odd = 1
} Ifx_ParityMode;



typedef enum
{
    Ifx_RxSel_a,
    Ifx_RxSel_b,
    Ifx_RxSel_c,
    Ifx_RxSel_d,
    Ifx_RxSel_e,
    Ifx_RxSel_f,
    Ifx_RxSel_g,
    Ifx_RxSel_h
} Ifx_RxSel;


typedef struct
{
    volatile void *module;
    sint32 index;
} IfxModule_IndexMap;

typedef struct
{
    Ifx_TickTime timestamp;
    uint8 data;
}Ifx_DataBufferMode_TimeStampSingle;
# 140 "0_Src/BaseSw/iLLD/TC23A/Tricore/Cpu/Std/Ifx_Types.h"
typedef enum
{
    Ifx_DataBufferMode_normal = 0,
    Ifx_DataBufferMode_timeStampSingle,

}Ifx_DataBufferMode;
# 154 "0_Src/BaseSw/iLLD/TC23A/Tricore/Cpu/Std/Ifx_Types.h"
typedef enum
{
    Ifx_Pwm_Mode_centerAligned = 0,
    Ifx_Pwm_Mode_centerAlignedInverted = 1,
    Ifx_Pwm_Mode_leftAligned = 2,
    Ifx_Pwm_Mode_rightAligned = 3,
    Ifx_Pwm_Mode_off = 4,
    Ifx_Pwm_Mode_init = 5,
    Ifx_Pwm_Mode_count
} Ifx_Pwm_Mode;
# 172 "0_Src/BaseSw/iLLD/TC23A/Tricore/Cpu/Std/Ifx_Types.h"
# 1 "0_Src/BaseSw/iLLD/TC23A/Tricore/Cpu/Std/Ifx_TypesGnuc.h" 1
# 27 "0_Src/BaseSw/iLLD/TC23A/Tricore/Cpu/Std/Ifx_TypesGnuc.h"
# 1 "c:\\hightec\\toolchains\\tricore\\v4.9.1.0-infineon-1.1\\tricore\\include\\machine\\cint.h" 1 3
# 24 "c:\\hightec\\toolchains\\tricore\\v4.9.1.0-infineon-1.1\\tricore\\include\\machine\\cint.h" 3
extern void _init_vectab (void);
extern void _init_hnd_chain (void);






extern int _install_int_handler (int intno, void (*handler) (int), int arg);







extern void *_install_chained_int_handler (int intno, void (*handler) (int),
        int arg);





extern int _remove_chained_int_handler (int intno, void *ptr);





extern int _install_trap_handler (int trapno, void (*handler) (int));
# 28 "0_Src/BaseSw/iLLD/TC23A/Tricore/Cpu/Std/Ifx_TypesGnuc.h" 2


typedef long fract;
typedef short sfract;
typedef long long laccum;
typedef long __packb;
typedef unsigned long __upackb;
typedef long __packhw;
typedef unsigned long __upackhw;
# 173 "0_Src/BaseSw/iLLD/TC23A/Tricore/Cpu/Std/Ifx_Types.h" 2
# 12 "0_Src/AppSw/Tricore/TftApp/DrawLogo.c" 2
# 1 "0_Src/CDrv/Tricore/Tft/conio_tft.h" 1
# 27 "0_Src/CDrv/Tricore/Tft/conio_tft.h"
# 1 "0_Src/AppSw/Tricore/Cfg_Illd/conio_cfg.h" 1
# 9 "0_Src/AppSw/Tricore/Cfg_Illd/conio_cfg.h"
typedef enum
{
    DIALOGOFF=0,
    KEYBOARDON
} TDIALOGMODE;

typedef struct CONIO_DLG_ENTRY
{
    TDIALOGMODE dialogMode;
    void (*function) (sint16 x, sint16 y);
} TCONIODLGENTRY, *pTCONIODLGENTRY;



extern const TCONIODLGENTRY conio_dialog_list[1];





typedef enum
{
    DISPLAY_BAR=0,
    DISPLAY_MENU=1,
    DISPLAY_IO0=2,
    DISPLAY_IO1=3,
    DISPLAY_GRAPH=4,
    DISPLAY_RSVD=5
} TDISPLAYMODE;



typedef enum
{
    RAWMODE=0,
    TEXTMODE=1,
    GRAPHICMODE_2COLOR=2,
    GRAPHICMODE_4COLOR=3,
    GRAPHICMODE_16COLOR=4,
    GRAPHICMODE_256COLOR=5
} TMODE;


typedef struct DISPLAY_INFO
{
    uint8 *pdisplay;
    uint8 *pdisplaycolor;
    TMODE mode;
    uint8 color;
    sint32 maxx;
    sint32 maxy;
    sint32 x;
    sint32 y;
} TDISPLAY_INFO;



typedef struct CONIO_DISPLAYMODE_ENTRY
{
 TDISPLAYMODE displayMode;
 TDISPLAY_INFO display;
} TCONIODMENTRY, *pTCONIODMENTRY;
# 28 "0_Src/CDrv/Tricore/Tft/conio_tft.h" 2
# 1 "0_Src/CDrv/Tricore/Tft/font_8_12.h" 1
# 14 "0_Src/CDrv/Tricore/Tft/font_8_12.h"
extern const uint8 __font_bitmap__8_12[256*12];
# 29 "0_Src/CDrv/Tricore/Tft/conio_tft.h" 2
# 1 "0_Src/CDrv/Tricore/Tft/tfthw.h" 1
# 23 "0_Src/CDrv/Tricore/Tft/tfthw.h"
extern uint16 Row_Buff[];
extern volatile uint32 tft_status;


void tft_drvinit (void);
void tft_init (void);

void tft_flush_row_buff(void *pFunc, uint32 numberOfPixel);

void tft_display_setxy (uint32 x, uint32 y);
# 30 "0_Src/CDrv/Tricore/Tft/conio_tft.h" 2
# 1 "c:\\hightec\\toolchains\\tricore\\v4.9.1.0-infineon-1.1\\lib\\gcc\\tricore\\4.9.4\\include\\stdarg.h" 1 3 4
# 40 "c:\\hightec\\toolchains\\tricore\\v4.9.1.0-infineon-1.1\\lib\\gcc\\tricore\\4.9.4\\include\\stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 98 "c:\\hightec\\toolchains\\tricore\\v4.9.1.0-infineon-1.1\\lib\\gcc\\tricore\\4.9.4\\include\\stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 31 "0_Src/CDrv/Tricore/Tft/conio_tft.h" 2
# 101 "0_Src/CDrv/Tricore/Tft/conio_tft.h"
typedef enum
{
    DISPINT32=0,
    DISPUINT32,
    DISPHEX8,
    DISPHEX16,
    DISPHEX32
} TVARMODE;
# 127 "0_Src/CDrv/Tricore/Tft/conio_tft.h"
typedef uint16 TCOLORTABLE[256];
typedef uint16 TCOLORTABLEASCII[16];




typedef uint8 TDISPLAY[(320/8) * ((240/12) - 1)];
typedef uint8 TDISPLAYCOLOR[(320/8) * ((240/12) - 1)];
typedef uint8 TDISPLAYBAR[(320/8)];
typedef uint8 TDISPLAYBARCOLOR[(320/8)];


typedef struct DISPLAYENTRY
{
    uint8 color_display;

    uint8 color_select;
    sint8 xmin;
    sint8 xmax;
    sint8 y;
    void (*select) (sint32 ind, struct DISPLAYENTRY * pdisplayentry);
    void (*display) (sint32 ind, struct DISPLAYENTRY * pdisplayentry);
     sint32 (*input) (sint32 ind, struct DISPLAYENTRY * pdisplayentry);
    uint8 text[(320/8)];
    uint8 symbol;
} TDISPLAYENTRY, *pTDISPLAYENTRY;




typedef struct CONIO_DRIVER
{
    TDISPLAYENTRY *pmenulist;
    TDISPLAYENTRY *pstdlist;
    TDISPLAY_INFO display[6];
    uint32 *pdasmirror;
    uint32 dasstatus;
    TDISPLAYMODE dasdisplaymode;
    sint32 cursorstatus;
    TDISPLAYMODE displaymode;
    TDIALOGMODE dialogmode;
    uint8 scanfdescr[20];
    uint8 scanftext[20];
    sint32 (*input) (sint32 ind, TDISPLAYENTRY * pdisplayentry);
    sint32 inputid;
    sint8 scanfx;
    uint8 blinky;
} TCONIO_DRIVER;



typedef struct CONTROL
{
    uint32 timebeg[32];
    uint32 timeend[32];
    uint32 timeus[32];
} TCONTROL;
# 201 "0_Src/CDrv/Tricore/Tft/conio_tft.h"
extern TCONIO_DRIVER conio_driver;
extern TCONTROL control;



void conio_init (const pTCONIODMENTRY dm_list);
void conio_periodic (sint16 x, sint16 y, TDISPLAYENTRY * pmenulist, TDISPLAYENTRY * pstdlist);

void conio_ascii_putch (TDISPLAYMODE displaymode, uint8 ch);
int conio_ascii_getch (TDISPLAYMODE displaymode);
int conio_ascii_kbhit (TDISPLAYMODE displaymode);
void conio_ascii_cputs (TDISPLAYMODE displaymode, uint8 * s);
uint8 *conio_ascii_cgets (TDISPLAYMODE displaymode, uint8 * s);
void conio_ascii_clrscr (TDISPLAYMODE displaymode);
void conio_ascii_clreol (TDISPLAYMODE displaymode);
void conio_ascii_gotoxy (TDISPLAYMODE displaymode, sint32 x, sint32 y);
void conio_ascii_textcolor (TDISPLAYMODE displaymode, sint32 color);
void conio_ascii_textbackground (TDISPLAYMODE displaymode, sint32 color);
void conio_ascii_textattr (TDISPLAYMODE displaymode, sint32 color);
void conio_ascii_textchangebackground (TDISPLAYMODE displaymode, sint32 color);
void conio_ascii_textchangeforeground (TDISPLAYMODE displaymode, sint32 color);
void conio_ascii_textchangecolor (TDISPLAYMODE displaymode, sint32 color);
void conio_ascii_printfxy (TDISPLAYMODE displaymode, sint32 x, sint32 y, const uint8 * format, ...);
void conio_ascii_printf (TDISPLAYMODE displaymode, const uint8 * format, ...);
void conio_ascii_char (TDISPLAYMODE displaymode, sint32 x, sint32 y, uint8 ch, uint8 color);
void conio_ascii_setcolortable (uint32 ind, uint32 r, uint32 g, uint32 b);
void conio_ascii_printfvalue (TDISPLAYMODE displaymode, TVARMODE varmode, uint32 value);

void conio_graphics_clrscr (TDISPLAYMODE displaymode);
void conio_graphics_textattr (TDISPLAYMODE displaymode, sint32 color);
void conio_graphics_gotoxy (TDISPLAYMODE displaymode, sint32 x, sint32 y);
void conio_graphics_cputs (TDISPLAYMODE displaymode, uint8 * s);
void conio_graphics_textcolor (TDISPLAYMODE displaymode, sint32 color);
void conio_graphics_textbackground (TDISPLAYMODE displaymode, sint32 color);
void conio_graphics_ascii_textattr (TDISPLAYMODE displaymode, sint32 color);
void conio_graphics_printfxy (TDISPLAYMODE displaymode, sint32 x, sint32 y, const uint8 * format, ...);
void conio_graphics_set (TDISPLAYMODE displaymode, sint32 x, sint32 y, uint8 color);
void conio_graphics_line (TDISPLAYMODE displaymode, sint32 x1, sint32 y1, sint32 x2, sint32 y2, uint8 color);
void conio_graphics_setcolortable (uint32 ind, uint32 r, uint32 g, uint32 b);
void conio_graphics_char (TDISPLAYMODE displaymode, sint32 x, sint32 y, uint8 ch, uint8 color);
# 265 "0_Src/CDrv/Tricore/Tft/conio_tft.h"
void display_ascii_clrscr (TDISPLAYMODE displaymode);
void display_ascii_printfxy (TDISPLAYMODE displaymode, sint32 x, sint32 y, const uint8 * format, ...);
void display_ascii_printf (TDISPLAYMODE displaymode, const uint8 * format, ...);
void display_ascii_clreol (TDISPLAYMODE displaymode);
void display_ascii_textattr (TDISPLAYMODE displaymode, sint32 color);
void display_ascii_textcolor (TDISPLAYMODE displaymode, sint32 color);
void display_ascii_textbackground (TDISPLAYMODE displaymode, sint32 color);
void display_ascii_textchangebackground (TDISPLAYMODE displaymode, sint32 color);
void display_ascii_textchangeforeground (TDISPLAYMODE displaymode, sint32 color);
void display_ascii_textchangecolor (TDISPLAYMODE displaymode, sint32 color);
void display_ascii_cputs (TDISPLAYMODE displaymode, uint8 * s);
void display_ascii_gotoxy (TDISPLAYMODE displaymode, sint32 x, sint32 y);

void display_graphics_cputs (TDISPLAYMODE displaymode, uint8 * s);
void display_graphics_printf (TDISPLAYMODE displaymode, const uint8 * format, ...);
void display_graphics_gotoxy (TDISPLAYMODE displaymode, sint32 x, sint32 y);
void display_graphics_printfxy (TDISPLAYMODE displaymode, sint32 x, sint32 y, const uint8 * format, ...);
void display_graphics_clrscr (TDISPLAYMODE displaymode);
void display_graphics_line (TDISPLAYMODE displaymode, sint32 x1, sint32 y1, sint32 x2, sint32 y2, uint8 color);
void display_graphics_textattr (TDISPLAYMODE displaymode, sint32 color);
void display_graphics_textcolor (TDISPLAYMODE displaymode, sint32 color);
void display_graphics_textbackground (TDISPLAYMODE displaymode, sint32 color);

void tft_graphic (TMODE mode, uint8 * pdisplay, uint8 * pdisplaycolor);
void tft_ascii_bar (uint8 * pdisplay, uint8 * pdisplaycolor);
void tft_ascii (TMODE mode, uint8 * pdisplay, uint8 * pdisplaycolor);
# 13 "0_Src/AppSw/Tricore/TftApp/DrawLogo.c" 2
# 26 "0_Src/AppSw/Tricore/TftApp/DrawLogo.c"
const uint8 infineon_logo[1962] = {
        0x50, 0xFF, 0x14, 0x2,
        0xA8, 0xFF, 0x13, 0x2,
        0xAE, 0xFF, 0x13, 0x2,
        0xB0, 0xFF, 0x13, 0x2,
        0xB0, 0xFF, 0x12, 0x2,
        0xB3, 0xFF, 0x11, 0x2,
        0xB3, 0xFF, 0x11, 0x2,
        0xB3, 0xFF, 0x12, 0x2,
        0xAD, 0xFF, 0x3, 0x5, 0x4, 0xFF, 0x11, 0x2,
        0xAE, 0xFF, 0x7, 0x5, 0x3, 0xFF, 0xC, 0x2,
        0xB1, 0xFF, 0x9, 0x5, 0x2, 0xFF, 0xA, 0x2,
        0xB2, 0xFF, 0xB, 0x5, 0x2, 0xFF, 0x6, 0x2,
        0xB5, 0xFF, 0xB, 0x5, 0x2, 0xFF, 0x3, 0x2,
        0xB7, 0xFF, 0xC, 0x5, 0x2, 0xFF, 0x1, 0x2,
        0xB6, 0xFF, 0x1, 0x2, 0x2, 0xFF, 0xC, 0x5,
        0xB8, 0xFF, 0x2, 0x2, 0x2, 0xFF, 0xC, 0x5,
        0xB6, 0xFF, 0x5, 0x2, 0x2, 0xFF, 0xB, 0x5,
        0xB4, 0xFF, 0x7, 0x2, 0x3, 0xFF, 0x9, 0x5, 0x21, 0xFF, 0x7, 0x5,
        0x8C, 0xFF, 0x9, 0x2, 0x2, 0xFF, 0x8, 0x5, 0x21, 0xFF, 0x9, 0x5, 0x6, 0xFF, 0x1, 0x5,
        0x82, 0xFF, 0xC, 0x2, 0x3, 0xFF, 0x4, 0x5, 0x22, 0xFF, 0xA, 0x5, 0x4, 0xFF, 0x5, 0x5,
        0x7F, 0xFF, 0xD, 0x2, 0x29, 0xFF, 0xA, 0x5, 0x3, 0xFF, 0x7, 0x5,
        0x7D, 0xFF, 0xD, 0x2, 0x29, 0xFF, 0xB, 0x5, 0x3, 0xFF, 0x7, 0x5,
        0x7C, 0xFF, 0xC, 0x2, 0x2B, 0xFF, 0x6, 0x5, 0x8, 0xFF, 0x7, 0x5,
        0x7B, 0xFF, 0xC, 0x2, 0x2C, 0xFF, 0x6, 0x5, 0x8, 0xFF, 0x7, 0x5,
        0x79, 0xFF, 0xD, 0x2, 0x8, 0xFF, 0x5, 0x5, 0x20, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5,
        0x79, 0xFF, 0xC, 0x2, 0xA, 0xFF, 0x5, 0x5, 0x20, 0xFF, 0x5, 0x5, 0xC, 0xFF, 0x1, 0x5,
        0x7B, 0xFF, 0xB, 0x2, 0xB, 0xFF, 0x5, 0x5, 0x20, 0xFF, 0x5, 0x5,
        0x87, 0xFF, 0xB, 0x2, 0xC, 0xFF, 0x5, 0x5, 0x20, 0xFF, 0x5, 0x5,
        0x86, 0xFF, 0xB, 0x2, 0xD, 0xFF, 0x5, 0x5, 0x20, 0xFF, 0x5, 0x5,
        0x85, 0xFF, 0xB, 0x2, 0xE, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x4, 0x5, 0x4, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x7, 0x5, 0xA, 0xFF, 0x4, 0x5, 0x9, 0xFF, 0x3, 0x5, 0x4, 0xFF, 0x6, 0x5, 0xE, 0xFF, 0x7, 0x5, 0xF, 0xFF, 0x8, 0x5, 0xC, 0xFF, 0x3, 0x5, 0x4, 0xFF, 0x6, 0x5,
        0x1A, 0xFF, 0xC, 0x2, 0xE, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x2, 0xFF, 0x8, 0x5, 0x8, 0xFF, 0xC, 0x5, 0x5, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x2, 0xFF, 0x9, 0x5, 0xB, 0xFF, 0xB, 0x5, 0xC, 0xFF, 0xA, 0x5, 0x9, 0xFF, 0x5, 0x5, 0x2, 0xFF, 0x9, 0x5,
        0x19, 0xFF, 0xB, 0x2, 0xF, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x1, 0xFF, 0xA, 0x5, 0x7, 0xFF, 0xC, 0x5, 0x5, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x1, 0xFF, 0xB, 0x5, 0x9, 0xFF, 0xD, 0x5, 0xA, 0xFF, 0xC, 0x5, 0x8, 0xFF, 0x5, 0x5, 0x1, 0xFF, 0xB, 0x5,
        0x17, 0xFF, 0xB, 0x2, 0x10, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x12, 0x5, 0x6, 0xFF, 0xC, 0x5, 0x5, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x11, 0x5, 0x9, 0xFF, 0xD, 0x5, 0x9, 0xFF, 0xE, 0x5, 0x7, 0xFF, 0x11, 0x5,
        0x17, 0xFF, 0xA, 0x2, 0x11, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x12, 0x5, 0x6, 0xFF, 0xC, 0x5, 0x5, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x12, 0x5, 0x7, 0xFF, 0xF, 0x5, 0x8, 0xFF, 0xF, 0x5, 0x6, 0xFF, 0x12, 0x5,
        0x15, 0xFF, 0xB, 0x2, 0x11, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x9, 0x5, 0x2, 0xFF, 0x7, 0x5, 0x8, 0xFF, 0x6, 0x5, 0x9, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x9, 0x5, 0x2, 0xFF, 0x7, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x4, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x9, 0x5, 0x2, 0xFF, 0x7, 0x5,
        0x15, 0xFF, 0xA, 0x2, 0x12, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x8, 0x5, 0x4, 0xFF, 0x6, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x7, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x7, 0x5, 0x5, 0xFF, 0x6, 0x5,
        0x14, 0xFF, 0xB, 0x2, 0x12, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x7, 0x5, 0x6, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x14, 0xFF, 0xB, 0x2, 0x12, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x14, 0xFF, 0xA, 0x2, 0x13, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x13, 0xFF, 0xB, 0x2, 0x13, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x4, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x4, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x13, 0xFF, 0xB, 0x2, 0x13, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x4, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x6, 0x5, 0x4, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x13, 0xFF, 0xB, 0x2, 0x13, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x13, 0x5, 0x3, 0xFF, 0x6, 0x5, 0x8, 0xFF, 0x6, 0x5, 0x4, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x13, 0xFF, 0xB, 0x2, 0x13, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x13, 0x5, 0x3, 0xFF, 0x6, 0x5, 0x8, 0xFF, 0x6, 0x5, 0x4, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x13, 0xFF, 0xB, 0x2, 0x13, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x13, 0x5, 0x3, 0xFF, 0x6, 0x5, 0x8, 0xFF, 0x6, 0x5, 0x4, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x13, 0xFF, 0xB, 0x2, 0x13, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x13, 0x5, 0x3, 0xFF, 0x6, 0x5, 0x8, 0xFF, 0x6, 0x5, 0x4, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x13, 0xFF, 0xC, 0x2, 0x12, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x10, 0xFF, 0x6, 0x5, 0x8, 0xFF, 0x6, 0x5, 0x4, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x13, 0xFF, 0xC, 0x2, 0x12, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x11, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x6, 0x5, 0x4, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x13, 0xFF, 0xC, 0x2, 0x12, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x11, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x6, 0x5, 0x4, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x14, 0xFF, 0xC, 0x2, 0x11, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x11, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x14, 0xFF, 0xC, 0x2, 0x11, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x5, 0x5, 0x11, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x14, 0xFF, 0xD, 0x2, 0x10, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x10, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x15, 0xFF, 0xC, 0x2, 0x10, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x8, 0xFF, 0x2, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x5, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x15, 0xFF, 0xD, 0x2, 0xF, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x7, 0x5, 0x6, 0xFF, 0x3, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x4, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x15, 0xFF, 0xD, 0x2, 0xF, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x8, 0x5, 0x2, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x7, 0x5, 0x2, 0xFF, 0x7, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x16, 0xFF, 0xD, 0x2, 0xE, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x8, 0xFF, 0xF, 0x5, 0x7, 0xFF, 0xE, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x17, 0xFF, 0xD, 0x2, 0xD, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x8, 0xFF, 0xF, 0x5, 0x8, 0xFF, 0xD, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x17, 0xFF, 0xE, 0x2, 0xC, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x9, 0xFF, 0xD, 0x5, 0x9, 0xFF, 0xC, 0x5, 0x8, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x18, 0xFF, 0xE, 0x2, 0xB, 0xFF, 0x5, 0x5, 0x6, 0xFF, 0x6, 0x5, 0x7, 0xFF, 0x5, 0x5, 0x8, 0xFF, 0x5, 0x5, 0xA, 0xFF, 0x5, 0x5, 0x7, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5, 0xB, 0xFF, 0x9, 0x5, 0xD, 0xFF, 0x8, 0x5, 0xA, 0xFF, 0x6, 0x5, 0x6, 0xFF, 0x6, 0x5,
        0x19, 0xFF, 0xD, 0x2, 0x6B, 0xFF, 0x3, 0x5, 0x12, 0xFF, 0x4, 0x5,
        0x38, 0xFF, 0xE, 0x2,
        0xBB, 0xFF, 0xE, 0x2, 0xAF, 0xFF, 0x1, 0x2,
        0xB, 0xFF, 0xE, 0x2, 0xAD, 0xFF, 0x1, 0x2,
        0xD, 0xFF, 0xE, 0x2, 0xAA, 0xFF, 0x2, 0x2,
        0xF, 0xFF, 0xF, 0x2, 0xA7, 0xFF, 0x1, 0x2,
        0x12, 0xFF, 0xF, 0x2, 0xA4, 0xFF, 0x2, 0x2,
        0x14, 0xFF, 0x10, 0x2, 0xA0, 0xFF, 0x2, 0x2,
        0x17, 0xFF, 0x11, 0x2, 0x9D, 0xFF, 0x2, 0x2,
        0x1A, 0xFF, 0x11, 0x2, 0x98, 0xFF, 0x3, 0x2,
        0x1E, 0xFF, 0x11, 0x2, 0x94, 0xFF, 0x4, 0x2,
        0x20, 0xFF, 0x12, 0x2, 0x90, 0xFF, 0x4, 0x2,
        0x24, 0xFF, 0x12, 0x2, 0x8B, 0xFF, 0x5, 0x2,
        0x28, 0xFF, 0x12, 0x2, 0x87, 0xFF, 0x5, 0x2,
        0x2C, 0xFF, 0x14, 0x2, 0x7F, 0xFF, 0x7, 0x2,
        0x30, 0xFF, 0x15, 0x2, 0x79, 0xFF, 0x8, 0x2,
        0x34, 0xFF, 0x16, 0x2, 0x73, 0xFF, 0x8, 0x2,
        0x3A, 0xFF, 0x17, 0x2, 0x6A, 0xFF, 0xB, 0x2,
        0x3E, 0xFF, 0x18, 0x2, 0x63, 0xFF, 0xC, 0x2,
        0x44, 0xFF, 0x1B, 0x2, 0x58, 0xFF, 0xE, 0x2,
        0x4A, 0xFF, 0x1E, 0x2, 0x4B, 0xFF, 0x12, 0x2,
        0x50, 0xFF, 0x21, 0x2, 0x3E, 0xFF, 0x16, 0x2,
        0x57, 0xFF, 0x28, 0x2, 0x27, 0xFF, 0x1E, 0x2,
        0x5F, 0xFF, 0x66, 0x2,
        0x66, 0xFF, 0x5D, 0x2,
        0x71, 0xFF, 0x52, 0x2,
        0x7B, 0xFF, 0x48, 0x2,
        0x88, 0xFF, 0x38, 0x2,
        0x9B, 0xFF, 0x23, 0x2,
        0x50, 0xFF };
# 124 "0_Src/AppSw/Tricore/TftApp/DrawLogo.c"
void graph_drawInfineonLogo(void)
{
    uint32 i, j, idx, width, height;
    uint8 color, count;

    uint32 x, y;

    width = 200;
    height = 87;
    x = (320 - width) / 2;
    y = (240 - height) / 2;

    idx = 0;
    color = -1;
    count = 0;


    for(i = 0; i < 240 - 12; i++)
    {
        for(j = 0; j < 320; j++)
        {
            conio_graphics_set(DISPLAY_GRAPH, j, i, 2);
        }
    }

    for(i = 5; i < 240 - 12 - 5; i++)
    {
        for(j = 5; j < 320 - 5; j++)
        {
            conio_graphics_set(DISPLAY_GRAPH, j, i, 5);
        }
    }

    for(i = 10; i < 240 - 12 - 10; i++)
    {
        for(j = 10; j < 320 - 10; j++)
        {
            conio_graphics_set(DISPLAY_GRAPH, j, i, 1);
        }
    }

    for(i = 0; i < height; i++)
    {
        for(j = 0; j < width; j++)
        {
            if(count == 0)
            {
                count = infineon_logo[idx++];
                color = infineon_logo[idx++];
            }
            if(color != 255)
            {
                conio_graphics_set(DISPLAY_GRAPH, x + j, y + height - i, color);
            }
            count--;
        }
    }
}
